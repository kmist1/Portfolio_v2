{"version":3,"sources":["Components/HomePage.tsx","Components/ThemeProvider.tsx","Components/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","pageContainer","marginTop","spacing","section1","flexDirection","filter","section2","color","fontWeight","border","position","top","left","zIndex","textAlign","boxSizing","HomePage","classes","Fragment","CssBaseline","Container","fixed","className","style","backgroundColor","fontSize","Typography","ThemeContext","React","createContext","ThemeProvider","children","useState","setTheme","document","body","Provider","value","toggleTheme","root","flexGrow","menuButton","marginRight","title","ButtonAppBar","AppBar","Toolbar","IconButton","edge","aria-label","variant","Button","App","useContext","onClick","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAOMA,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CAGTC,cAAe,CACXC,UAAWH,EAAMI,QAAQ,IAG7BC,SAAU,CACNC,cAAc,SACdC,OAAO,aAGXC,SAAU,CAENC,MAAM,QACNC,WAAW,OACXC,OAAO,oBACPC,SAAS,WACTC,IAAI,MACJC,KAAK,MACLC,OAAQf,EAAMI,QAAQ,GACtBY,UAAU,SACVC,UAAU,mBASP,SAAUC,IAErB,IAAMC,EAAUrB,IAEhB,OACI,6BACI,kBAAC,IAAMsB,SAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAWL,EAAQjB,eAChC,6BACI,yBAAKsB,UAAaL,EAAQd,WAC1B,yBAAKmB,UAAWL,EAAQX,SAAUiB,MAAO,CAACC,gBAAgB,qBACtD,wBAAID,MAAO,CAACE,SAAU,SAAtB,oBAGR,kBAACC,EAAA,EAAD,S,kBCjDPC,EAAeC,IAAMC,cAC9B,IAGSC,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAC3BC,mBAAwB,SADG,mBAC9ClC,EAD8C,KACvCmC,EADuC,KAM/C1B,EAAkB,UAAVT,EAAoB,OAAS,OACrC0B,EAA4B,UAAV1B,EAAoB,OAAS,OAKrD,OAHAoC,SAASC,KAAKZ,MAAMhB,MAAQA,EAC5B2B,SAASC,KAAKZ,MAAMC,gBAAkBA,EAGlC,kBAACG,EAAaS,SAAd,CAAuBC,MAAO,CAAEvC,QAAOwC,YAXvB,WAChBL,EAAmB,UAAVnC,EAAoB,OAAS,YAWjCiC,I,iDCdPnC,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTwC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAa5C,EAAMI,QAAQ,IAE/ByC,MAAO,CACHH,SAAU,QAKP,SAASI,IACpB,IAAM3B,EAAUrB,IAEhB,OACI,yBAAK0B,UAAWL,EAAQsB,MACpB,kBAACM,EAAA,EAAD,CAAQnC,SAAS,UACb,kBAACoC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQ1B,UAAWL,EAAQwB,WAAYlC,MAAM,UAAU0C,aAAW,QAC/E,kBAAC,IAAD,OAEJ,kBAACvB,EAAA,EAAD,CAAYwB,QAAQ,KAAK5B,UAAWL,EAAQ0B,OAA5C,QAGA,kBAACQ,EAAA,EAAD,CAAQ5C,MAAM,WAAd,YC7BpB,IAiBe6C,EAjBO,WAAO,IAAD,EACOC,qBAAW1B,GAAlC7B,EADgB,EAChBA,MAAOwC,EADS,EACTA,YAEf,OACI,6BACI,kBAAC,EAAD,MACA,6BACI,4BAAQgB,QAAShB,GAAjB,aACyB,UAAVxC,EAAoB,OAAS,QAD5C,SAGA,kBAACkB,EAAD,SCLIuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAEH,kBAAC,EAAD,KACF,kBAAC,EAAD,OAGF3B,SAAS4B,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b6b83af.chunk.js","sourcesContent":["import React, {useContext} from 'react';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {ThemeContext} from \"./ThemeProvider\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n\n\n        pageContainer: {\n            marginTop: theme.spacing(5),\n        },\n\n        section1: {\n            flexDirection:'column',\n            filter:'blur(2px)'\n        },\n\n        section2: {\n\n            color:'white',\n            fontWeight:'bold',\n            border:'3px solid #f1f1f1',\n            position:'absolute',\n            top:'40%',\n            left:'25%',\n            zIndex: theme.spacing(2),\n            textAlign:'center',\n            boxSizing:'border-box'\n\n        },\n    }),\n);\n\n\n\n\nexport default function  HomePage() {\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <React.Fragment>\n                <CssBaseline />\n                <Container fixed className={classes.pageContainer}>\n                    <div>\n                        <div className = {classes.section1}></div>\n                        <div className={classes.section2} style={{backgroundColor:'rgba(0,0,0, 0.4)'}}>\n                            <h1 style={{fontSize: '80px'}}> Krunal Mistry</h1>\n                        </div>\n                    </div>\n                    <Typography>\n\n                    </Typography>\n                </Container>\n            </React.Fragment>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\n\ntype ThemeProvider = \"light\" | \"dark\";\ntype ThemeContext = { theme: ThemeProvider; toggleTheme: () => void };\n\nexport const ThemeContext = React.createContext<ThemeContext>(\n    {} as ThemeContext\n);\n\nexport const ThemeProvider: React.FC = ({ children }) => {\n    const [theme, setTheme] = useState<ThemeProvider>(\"light\");\n    const toggleTheme = () => {\n        setTheme(theme === \"light\" ? \"dark\" : \"light\");\n    };\n\n    const color = theme === \"light\" ? \"#333\" : \"#FFF\";\n    const backgroundColor = theme === \"light\" ? \"#FFF\" : \"#333\";\n\n    document.body.style.color = color;\n    document.body.style.backgroundColor = backgroundColor;\n\n    return (\n        <ThemeContext.Provider value={{ theme, toggleTheme }}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n);\n\nexport default function ButtonAppBar() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","import React, {useContext} from 'react';\nimport LandingPage from \"./Components/LandingPage\";\nimport HomePage from \"./Components/HomePage\";\nimport './App.css';\nimport {ThemeContext} from './Components/ThemeProvider';\nimport NavBar from \"./Components/NavBar\";\n\nconst App: React.FC = () => {\n    const { theme, toggleTheme } = useContext(ThemeContext);\n\n    return (\n        <div>\n            <NavBar/>\n            <div>\n                <button onClick={toggleTheme}>\n                    Switch to {theme === \"light\" ? \"dark\" : \"light\"} mode\n                </button>\n                <HomePage/>\n\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ThemeProvider} from './Components/ThemeProvider'\nimport LandingPage from \"./Components/LandingPage\";\n\nReactDOM.render(\n\n      <ThemeProvider>\n    <App />\n      </ThemeProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}